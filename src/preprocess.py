#!/usr/bin/env python3
"""
–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YOLO
"""

import argparse
from pathlib import Path
import cv2 as cv
import numpy as np
from tqdm import tqdm
import sys
from typing import Tuple, Optional, Dict, Any
import time

class YOLOPartPreprocessor:
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–µ–π —Å YOLO"""
    
    def __init__(self, target_size: int = 224, 
                 yolo_model: str = 'yolov8n.pt',
                 confidence_threshold: float = 0.25,
                 iou_threshold: float = 0.45):
        self.target_size = target_size
        self.confidence_threshold = confidence_threshold
        self.iou_threshold = iou_threshold
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏
        self.yolo_model = self._load_yolo_model(yolo_model)
    
    def _load_yolo_model(self, model_name: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏"""
        try:
            from ultralytics import YOLO
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏: {model_name}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∫–∞—á–∞–µ—Ç)
            model = YOLO(model_name)
            print("‚úÖ YOLO –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return model
            
        except ImportError:
            print("‚ùå –û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'ultralytics' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ultralytics")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YOLO –º–æ–¥–µ–ª–∏: {e}")
            sys.exit(1)
    
    def read_image_safe(self, path: Path) -> Optional[np.ndarray]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            with open(path, 'rb') as f:
                file_bytes = np.asarray(bytearray(f.read()), dtype=np.uint8)
                img = cv.imdecode(file_bytes, cv.IMREAD_COLOR)
            return img
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")
            return None
    
    def write_image_safe(self, path: Path, img: np.ndarray) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            path.parent.mkdir(parents=True, exist_ok=True)
            is_success, buffer = cv.imencode(".jpg", img, [cv.IMWRITE_JPEG_QUALITY, 95])
            if is_success:
                with open(path, 'wb') as f:
                    f.write(buffer)
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {path}: {e}")
            return False
    
    def detect_part_with_yolo(self, image: np.ndarray) -> Optional[Tuple[int, int, int, int]]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é YOLO
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (x, y, w, h) bounding box –∏–ª–∏ None
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
            results = self.yolo_model(
                image, 
                conf=self.confidence_threshold,
                iou=self.iou_threshold,
                verbose=False
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if len(results) > 0:
                boxes = results[0].boxes
                
                if boxes is not None and len(boxes) > 0:
                    # –ü–æ–ª—É—á–∞–µ–º bounding boxes –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    bboxes = boxes.xyxy.cpu().numpy()  # [x1, y1, x2, y2]
                    confidences = boxes.conf.cpu().numpy()
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –±–æ–∫—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                    best_idx = np.argmax(confidences)
                    best_conf = confidences[best_idx]
                    box = bboxes[best_idx]
                    
                    x1, y1, x2, y2 = map(int, box)
                    width = x2 - x1
                    height = y2 - y1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã (20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞)
                    padding_x = int(width * 0.2)
                    padding_y = int(height * 0.2)
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    h, w = image.shape[:2]
                    x1_padded = max(0, x1 - padding_x)
                    y1_padded = max(0, y1 - padding_y)
                    x2_padded = min(w, x2 + padding_x)
                    y2_padded = min(h, y2 + padding_y)
                    
                    final_width = x2_padded - x1_padded
                    final_height = y2_padded - y1_padded
                    
                    return (x1_padded, y1_padded, final_width, final_height)
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return None
    
    def enhance_image_quality(self, image: np.ndarray) -> np.ndarray:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–µ–π"""
        try:
            # LAB —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—Ä–∫–æ—Å—Ç–∏
            lab = cv.cvtColor(image, cv.COLOR_BGR2LAB)
            l, a, b = cv.split(lab)
            
            # CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
            clahe = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
            l = clahe.apply(l)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            enhanced = cv.merge([l, a, b])
            enhanced = cv.cvtColor(enhanced, cv.COLOR_LAB2BGR)
            
            # –ú—è–≥–∫–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
            enhanced = cv.bilateralFilter(enhanced, 9, 75, 75)
            
            # –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
            kernel = np.array([[-1, -1, -1],
                              [-1,  9, -1],
                              [-1, -1, -1]])
            enhanced = cv.filter2D(enhanced, -1, kernel)
            
            return enhanced
            
        except Exception:
            # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return image
    
    def smart_resize_with_padding(self, image: np.ndarray) -> np.ndarray:
        """–£–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å padding –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞"""
        h, w = image.shape[:2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale = self.target_size / max(h, w)
        new_w = int(w * scale)
        new_h = int(h * scale)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        if scale > 1:
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            resized = cv.resize(image, (new_w, new_h), interpolation=cv.INTER_LANCZOS4)
        else:
            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º area –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–∞
            resized = cv.resize(image, (new_w, new_h), interpolation=cv.INTER_AREA)
        
        # –î–æ–±–∞–≤–ª—è–µ–º padding –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        top = (self.target_size - new_h) // 2
        bottom = self.target_size - new_h - top
        left = (self.target_size - new_w) // 2
        right = self.target_size - new_w - left
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π)
        padded = cv.copyMakeBorder(
            resized, top, bottom, left, right, 
            cv.BORDER_CONSTANT, value=[128, 128, 128]
        )
        
        return padded
    
    def preprocess_single_image(self, src_path: Path, dst_path: Path) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å YOLO
        """
        stats = {
            'success': False,
            'operations': [],
            'detection_confidence': 0.0,
            'processing_time': 0.0
        }
        
        start_time = time.time()
        
        try:
            # 1. –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = self.read_image_safe(src_path)
            if image is None:
                stats['error'] = 'read_failed'
                stats['processing_time'] = time.time() - start_time
                return stats
            
            # 2. –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é YOLO
            bbox = self.detect_part_with_yolo(image)
            
            if bbox is not None:
                x, y, w, h = bbox
                cropped = image[y:y+h, x:x+w]
                stats['operations'].append('yolo_detection')
                stats['detection_confidence'] = 0.5  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            else:
                # Fallback: —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
                h_img, w_img = image.shape[:2]
                size = min(h_img, w_img)
                y_start = (h_img - size) // 2
                x_start = (w_img - size) // 2
                cropped = image[y_start:y_start+size, x_start:x_start+size]
                stats['operations'].append('center_crop')
                stats['detection_confidence'] = 0.0
            
            # 3. –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            enhanced = self.enhance_image_quality(cropped)
            stats['operations'].append('quality_enhancement')
            
            # 4. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
            final_image = self.smart_resize_with_padding(enhanced)
            stats['operations'].append('resize_padding')
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = self.write_image_safe(dst_path, final_image)
            stats['success'] = success
            
            if not success:
                stats['error'] = 'save_failed'
                
        except Exception as e:
            stats['error'] = str(e)
            stats['success'] = False
        
        stats['processing_time'] = time.time() - start_time
        return stats
    
    def process_dataset(self, src_root: Path, dst_root: Path, 
                       test_mode: bool = False, 
                       test_limit: int = 100) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å YOLO
        """
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å YOLO: {src_root} ‚Üí {dst_root}")
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: YOLOv8")
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        files = list(src_root.rglob("*"))
        images = [p for p in files if p.suffix.lower() in [".jpg", ".jpeg", ".png"]]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if test_mode:
            images = images[:test_limit]
            print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'processed': 0,
            'successful': 0,
            'failed': 0,
            'read_errors': 0,
            'save_errors': 0,
            'detection_success': 0,
            'total_processing_time': 0.0
        }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        pbar = tqdm(images, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞", unit="img")
        
        for src_path in pbar:
            rel_path = src_path.relative_to(src_root)
            dst_path = dst_root / rel_path.with_suffix(".jpg")
            
            result = self.preprocess_single_image(src_path, dst_path)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats['processed'] += 1
            stats['total_processing_time'] += result.get('processing_time', 0)
            
            if result['success']:
                stats['successful'] += 1
                if 'yolo_detection' in result.get('operations', []):
                    stats['detection_success'] += 1
            else:
                stats['failed'] += 1
                if result.get('error') == 'read_failed':
                    stats['read_errors'] += 1
                elif result.get('error') == 'save_failed':
                    stats['save_errors'] += 1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            pbar.set_postfix({
                '–£—Å–ø–µ—Ö': stats['successful'],
                'YOLO': stats['detection_success'],
                '–û—à–∏–±–∫–∞': stats['failed']
            })
        
        return stats

def main():
    parser = argparse.ArgumentParser(
        description="–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–µ–π —Å YOLO",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s --src data/raw --dst data/processed --test
  %(prog)s --src data/raw --dst data/processed --limit 100
  %(prog)s --src data/raw --dst data/processed --model yolov8s.pt
        """
    )
    
    parser.add_argument("--src", type=str, required=True,
                       help="–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")
    parser.add_argument("--dst", type=str, required=True,
                       help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    parser.add_argument("--test", action="store_true",
                       help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
    parser.add_argument("--limit", type=int, default=100,
                       help="–õ–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞ (default: 100)")
    parser.add_argument("--size", type=int, default=224,
                       help="–¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (default: 224)")
    parser.add_argument("--model", type=str, default='yolov8n.pt',
                       help="YOLO –º–æ–¥–µ–ª—å (default: yolov8n.pt)")
    parser.add_argument("--conf", type=float, default=0.25,
                       help="–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (default: 0.25)")
    parser.add_argument("--iou", type=float, default=0.45,
                       help="–ü–æ—Ä–æ–≥ IoU (default: 0.45)")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
    src_path = Path(args.src)
    dst_path = Path(args.dst)
    
    if not src_path.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {src_path}")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    print("üöú –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–ª—å—Ö–æ–∑-–∑–∞–ø—á–∞—Å—Ç–µ–π (YOLO)")
    print("=" * 70)
    
    preprocessor = YOLOPartPreprocessor(
        target_size=args.size,
        yolo_model=args.model,
        confidence_threshold=args.conf,
        iou_threshold=args.iou
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()
    stats = preprocessor.process_dataset(
        src_path, dst_path, 
        test_mode=args.test, 
        test_limit=args.limit
    )
    total_time = time.time() - start_time
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 70)
    print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 70)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['successful']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
    print(f"   - –û—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è: {stats['read_errors']}")
    print(f"   - –û—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏: {stats['save_errors']}")
    print(f"üéØ –£—Å–ø–µ—à–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è YOLO: {stats['detection_success']}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}")
    
    if stats['processed'] > 0:
        success_rate = stats['successful'] / stats['processed'] * 100
        detection_rate = stats['detection_success'] / stats['processed'] * 100
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏: {detection_rate:.1f}%")
        
        avg_time = stats['total_processing_time'] / stats['processed']
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_time:.2f} —Å–µ–∫")
    
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫")
    
    if stats['successful'] > 0:
        images_per_second = stats['successful'] / total_time
        print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {images_per_second:.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
    
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {dst_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())