#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–≤—É—Ö .npy —Ñ–∞–π–ª–æ–≤
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
"""

import argparse
import torch
import numpy as np
from pathlib import Path
import cv2 as cv
import torchvision.transforms as T
from tqdm import tqdm
import json
import time
from datetime import datetime
import sys

# –ò–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
try:
    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
    from src.models.encoder import ResNet50Encoder
    from src.utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
    import utils.config as config
except ImportError:
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        from models.encoder import ResNet50Encoder
        from utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
        import config as config
    except ImportError:
        try:
            # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            sys.path.append(str(Path(__file__).parent))
            sys.path.append(str(Path(__file__).parent.parent))
            sys.path.append(str(Path(__file__).parent.parent / "utils"))
            
            from models.encoder import ResNet50Encoder
            from utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
            import config as config
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:")
            print("   src/")
            print("   ‚îú‚îÄ‚îÄ models/encoder.py")
            print("   ‚îú‚îÄ‚îÄ utils_cv.py")
            print("   utils/")
            print("   ‚îî‚îÄ‚îÄ config.py")
            sys.exit(1)

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
transform = T.Compose([
    T.ToTensor(),
    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

def get_device(device_str: str = "auto") -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    if device_str == "auto":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
        if torch.cuda.is_available():
            try:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ PyTorch —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å CUDA
                x = torch.zeros(1).cuda()
                print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return "cuda"
            except Exception as e:
                print(f"‚ö†Ô∏è  CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ PyTorch –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å CUDA: {e}")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MPS (Apple Silicon)
        elif torch.backends.mps.is_available():
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MPS (Apple Silicon)")
            return "mps"
        else:
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            return "cpu"
    else:
        # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if device_str == "cuda":
            if torch.cuda.is_available():
                try:
                    x = torch.zeros(1).cuda()
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CUDA")
                    return "cuda"
                except Exception as e:
                    print(f"‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                    print("üí° –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU")
                    return "cpu"
            else:
                print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                print("üí° –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU")
                return "cpu"
        elif device_str == "mps":
            if torch.backends.mps.is_available():
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MPS")
                return "mps"
            else:
                print("‚ùå MPS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                print("üí° –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU")
                return "cpu"
        else:
            print(f"üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {device_str}")
            return device_str

@torch.no_grad()
def embed_image(img_path, model, device):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ö–æ–¥–æ–º –ø—Ä–æ–±–ª–µ–º—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ numpy –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        with open(img_path, 'rb') as f:
            file_bytes = np.asarray(bytearray(f.read()), dtype=np.uint8)
            img_bgr = cv.imdecode(file_bytes, cv.IMREAD_COLOR)
        
        if img_bgr is None:
            return None
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç preprocess.py)
        bbox = find_largest_foreground_bbox(img_bgr, min_area_ratio=getattr(config, 'MIN_OBJ_AREA', 0.01))
        if bbox is not None:
            bbox = pad_bbox(bbox, img_bgr.shape, pad_ratio=getattr(config, 'PAD_RATIO', 0.1))
            x1, y1, x2, y2 = bbox
            img_bgr = img_bgr[y1:y2, x1:x2]
        else:
            img_bgr = center_square_crop(img_bgr)
        
        img_bgr = resize_high_quality(img_bgr, getattr(config, 'TARGET_SIZE', 384))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
        import torchvision.transforms.functional as F
        img_rgb = cv.cvtColor(img_bgr, cv.COLOR_BGR2RGB)
        pil = F.to_pil_image(img_rgb)
        x = transform(pil).unsqueeze(0)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        x = x.to(device)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        emb = model(x).cpu().numpy()[0]  # (2048,)
        return emb.astype(np.float32)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
        return None

def load_existing_data(embeddings_dir: Path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    emb_file = embeddings_dir / "per_image.npy"
    ids_file = embeddings_dir / "part_ids.npy"
    meta_file = embeddings_dir / "metadata.json"
    
    if emb_file.exists() and ids_file.exists():
        try:
            embeddings = np.load(emb_file)
            part_ids = np.load(ids_file, allow_pickle=True)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = {}
            if meta_file.exists():
                with open(meta_file, 'r') as f:
                    metadata = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            return embeddings, part_ids, metadata, set(part_ids.tolist())
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None, None, {}, set()
    else:
        print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        return None, None, {}, set()

def save_embeddings(embeddings_dir: Path, embeddings: np.ndarray, part_ids: np.ndarray, metadata: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞"""
    embeddings_dir.mkdir(parents=True, exist_ok=True)
    
    emb_file = embeddings_dir / "per_image.npy"
    ids_file = embeddings_dir / "part_ids.npy"
    meta_file = embeddings_dir / "metadata.json"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    if emb_file.exists():
        emb_file.rename(embeddings_dir / "per_image.npy.backup")
    if ids_file.exists():
        ids_file.rename(embeddings_dir / "part_ids.npy.backup")
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: float32 –∏ —É–±–µ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–∏–ø–µ
    embeddings_opt = embeddings.astype(np.float32)
    part_ids_opt = np.array(part_ids, dtype=object)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.save(emb_file, embeddings_opt)
    np.save(ids_file, part_ids_opt)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata['updated_at'] = datetime.now().isoformat()
    metadata['total_embeddings'] = len(embeddings_opt)
    metadata['embedding_dim'] = embeddings_opt.shape[1] if len(embeddings_opt.shape) > 1 else 2048
    metadata['data_type'] = str(embeddings_opt.dtype)
    
    with open(meta_file, 'w') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    size_mb = (emb_file.stat().st_size + ids_file.stat().st_size) / (1024 * 1024)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(embeddings_opt)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ({size_mb:.1f} MB)")

def extract_embeddings(src: Path, out: Path, update: bool = True):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {src}")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {out}")
    print(f"üîÑ –†–µ–∂–∏–º: {'–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if update else '–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å'}")
    
    start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ update=True)
    existing_embs, existing_ids, metadata, seen_files = None, None, {}, set()
    if update:
        existing_embs, existing_ids, metadata, seen_files = load_existing_data(out)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    device = get_device(getattr(config, 'DEVICE', 'auto'))
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    model = ResNet50Encoder(out_dim=2048, pretrained=True)
    model = model.to(device)
    model.eval()
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –°–±–æ—Ä —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    all_images = []
    for part_dir in src.iterdir():
        if not part_dir.is_dir():
            continue
        part_id = part_dir.name  # –≠—Ç–æ ID –¥–µ—Ç–∞–ª–∏!
        for img_path in part_dir.glob("*.jpg"):
            rel_id = f"{part_id}/{img_path.name}"  # part_id/image_name.jpg
            if update and rel_id in seen_files:
                continue
            all_images.append((img_path, part_id, rel_id))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(all_images)}")
    
    if len(all_images) == 0:
        if update:
            print("‚úÖ –ù–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç")
        else:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    new_embeddings = []
    new_ids = []  # –≠—Ç–æ rel_id (part_id/image_name.jpg)
    error_count = 0
    success_count = 0
    
    print("üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    pbar = tqdm(all_images, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    for img_path, part_id, rel_id in pbar:
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            emb = embed_image(img_path, model, device)
            if emb is None:
                error_count += 1
                continue
            
            new_embeddings.append(emb)
            new_ids.append(rel_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π ID
            success_count += 1
            
            pbar.set_postfix({
                '–£—Å–ø–µ—Ö': success_count,
                '–û—à–∏–±–æ–∫': error_count
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {img_path}: {e}")
            error_count += 1
            continue
    
    if len(new_embeddings) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ numpy –º–∞—Å—Å–∏–≤—ã
    new_embeddings = np.array(new_embeddings, dtype=np.float32)
    new_ids = np.array(new_ids, dtype=object)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(new_embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    if error_count > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if existing_embs is not None and existing_ids is not None:
        final_embs = np.concatenate([existing_embs, new_embeddings], axis=0)
        final_ids = np.concatenate([existing_ids, new_ids], axis=0)
        print(f"üìä –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(final_embs)}")
    else:
        final_embs = new_embeddings
        final_ids = new_ids
        print(f"üìä –ù–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {len(final_embs)}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_embeddings(out, final_embs, final_ids, metadata)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = time.time() - start_time
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìä –í—Å–µ–≥–æ: {success_count + error_count}")
    if success_count > 0:
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫")
        print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {success_count/total_time:.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {out}")

def main():
    parser = argparse.ArgumentParser(
        description="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s --src data/processed --out data/embeddings
  %(prog)s --src data/processed --out data/embeddings --update
  %(prog)s --src data/processed --out data/embeddings --force
  %(prog)s --src data/processed --out data/embeddings --device cpu
        """
    )
    
    parser.add_argument("--src", type=Path, default=Path("data/processed"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    parser.add_argument("--out", type=Path, default=Path("data/embeddings"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    parser.add_argument("--update", action="store_true", default=True,
                       help="–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    parser.add_argument("--force", action="store_true",
                       help="–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)")
    parser.add_argument("--device", type=str, default="auto",
                       help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: 'cpu', 'cuda', 'mps', 'auto' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω --force, –æ—Ç–∫–ª—é—á–∞–µ–º update
    if args.force:
        args.update = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not args.src.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.src}")
        return 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if hasattr(config, 'DEVICE'):
        config.DEVICE = args.device
    
    try:
        extract_embeddings(args.src, args.out, args.update)
        print("\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return 0
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())