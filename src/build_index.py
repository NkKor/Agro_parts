#!/usr/bin/env python3
"""
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
1. –ò–Ω–¥–µ–∫—Å –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
2. –ò–Ω–¥–µ–∫—Å –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º –¥–µ—Ç–∞–ª–µ–π
"""

import argparse
import numpy as np
from pathlib import Path
import json
import time
from datetime import datetime
import sys

def build_indexes(embeddings_dir: Path, centroids_dir: Path, out_dir: Path):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤"""
    print(f"üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings_dir}")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {centroids_dir}")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {out_dir}")
    
    start_time = time.time()
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FAISS
    try:
        import faiss
        print("‚úÖ FAISS –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        print("‚ùå FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install faiss-cpu")
        print("üí° –ò–ª–∏ –¥–ª—è GPU: pip install faiss-gpu")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAISS: {e}")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    emb_file = embeddings_dir / "per_image.npy"
    ids_file = embeddings_dir / "part_ids.npy"
    
    if not emb_file.exists() or not ids_file.exists():
        print(f"‚ùå –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {embeddings_dir}")
        return False
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    try:
        embeddings = np.load(emb_file).astype(np.float32)
        part_ids = np.load(ids_file, allow_pickle=True)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    if len(embeddings) != len(part_ids):
        print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ vs {len(part_ids)} ID")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    centroid_file = centroids_dir / "per_part.npy"
    names_file = centroids_dir / "part_names.npy"
    
    if not centroid_file.exists() or not names_file.exists():
        print(f"‚ùå –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {centroids_dir}")
        return False
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤...")
    try:
        centroids = np.load(centroid_file).astype(np.float32)
        part_names = np.load(names_file, allow_pickle=True)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(centroids)} —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    if len(embeddings) > 0 and len(centroids) > 0:
        if embeddings.shape[1] != centroids.shape[1]:
            print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: {embeddings.shape[1]} vs {centroids.shape[1]}")
            return False
    
    dim = embeddings.shape[1] if len(embeddings) > 0 else (centroids.shape[1] if len(centroids) > 0 else 2048)
    print(f"üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {dim}")
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    print("üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(embeddings) > 100000:
            # IVF (Inverted File) –∏–Ω–¥–µ–∫—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
            nlist = min(10000, max(100, len(embeddings) // 100))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            print(f"   üéì –°–æ–∑–¥–∞–Ω–∏–µ IVF –∏–Ω–¥–µ–∫—Å–∞ —Å {nlist} –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏...")
            quantizer = faiss.IndexFlatL2(dim)
            index_images = faiss.IndexIVFFlat(quantizer, dim, nlist, faiss.METRIC_L2)
            
            # –û–±—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (–Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            train_size = min(100000, len(embeddings))
            print(f"   üéì –û–±—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ {train_size} –≤–µ–∫—Ç–æ—Ä–∞—Ö...")
            index_images.train(embeddings[:train_size])
        else:
            # –ü—Ä–æ—Å—Ç–æ–π Flat –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
            print("   üéì –°–æ–∑–¥–∞–Ω–∏–µ Flat –∏–Ω–¥–µ–∫—Å–∞...")
            index_images = faiss.IndexFlatL2(dim)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å
        print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(embeddings)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å...")
        index_images.add(embeddings)
        print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–æ—Å—Ç—Ä–æ–µ–Ω ({index_images.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return False
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º
    print("üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º...")
    
    try:
        if len(centroids) > 0:
            index_centroids = faiss.IndexFlatL2(dim)
            index_centroids.add(centroids)
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º –ø–æ—Å—Ç—Ä–æ–µ–Ω ({index_centroids.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
        else:
            index_centroids = None
            print("‚ö†Ô∏è  –ù–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {e}")
        index_centroids = None
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    out_dir.mkdir(parents=True, exist_ok=True)
    
    images_index_file = out_dir / "image_index.faiss"
    centroids_index_file = out_dir / "centroid_index.faiss"
    meta_file = out_dir / "metadata.json"
    
    # –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    backup_files = []
    if images_index_file.exists():
        backup_path = out_dir / "image_index.faiss.backup"
        images_index_file.rename(backup_path)
        backup_files.append(backup_path)
    if centroids_index_file.exists() and index_centroids is not None:
        backup_path = out_dir / "centroid_index.faiss.backup"
        centroids_index_file.rename(backup_path)
        backup_files.append(backup_path)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    try:
        faiss.write_index(index_images, str(images_index_file))
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {images_index_file}")
        
        if index_centroids is not None:
            faiss.write_index(index_centroids, str(centroids_index_file))
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {centroids_index_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–∞–ø—ã –µ—Å–ª–∏ –±—ã–ª–∏
        for backup_path in backup_files:
            original_path = backup_path.with_suffix('')
            if backup_path.exists() and not original_path.exists():
                backup_path.rename(original_path)
        return False
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    try:
        ids_mapping_file = out_dir / "image_ids.npy"
        names_mapping_file = out_dir / "centroid_names.npy"
        
        np.save(ids_mapping_file, part_ids)
        np.save(names_mapping_file, part_names)
        print(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥–∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤: {e}")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        'created_at': datetime.now().isoformat(),
        'total_images': len(embeddings),
        'total_parts': len(centroids),
        'embedding_dim': dim,
        'index_type_images': 'IVFFlat' if len(embeddings) > 100000 else 'Flat',
        'index_type_centroids': 'Flat' if index_centroids is not None else 'None',
        'source_embeddings': str(embeddings_dir),
        'source_centroids': str(centroids_dir),
        'processing_time': time.time() - start_time
    }
    
    try:
        with open(meta_file, 'w') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = time.time() - start_time
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    images_size_mb = images_index_file.stat().st_size / (1024 * 1024)
    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_size_mb:.2f} MB ({index_images.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
    
    if index_centroids is not None:
        centroids_size_mb = centroids_index_file.stat().st_size / (1024 * 1024)
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {centroids_size_mb:.2f} MB ({index_centroids.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {out_dir}")
    
    return True

def main():
    parser = argparse.ArgumentParser(
        description="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s --embeddings data/embeddings --centroids data/centroids --out data/indexes
        """
    )
    
    parser.add_argument("--embeddings", type=Path, default=Path("data/embeddings"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
    parser.add_argument("--centroids", type=Path, default=Path("data/centroids"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º–∏")
    parser.add_argument("--out", type=Path, default=Path("data/indexes"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
    
    args = parser.parse_args()
    
    try:
        success = build_indexes(args.embeddings, args.centroids, args.out)
        if success:
            print("\nüéâ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return 0
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
            return 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())