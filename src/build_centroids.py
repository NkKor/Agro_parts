#!/usr/bin/env python3
"""
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏
–ò–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ‚Üí —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –¥–µ—Ç–∞–ª–µ–π
"""

import argparse
import numpy as np
from pathlib import Path
import json
import time
from datetime import datetime
from collections import defaultdict
import sys

def build_centroids(embeddings_dir: Path, out_dir: Path):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏"""
    print(f"üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings_dir}")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {out_dir}")
    
    start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    emb_file = embeddings_dir / "per_image.npy"
    ids_file = embeddings_dir / "part_ids.npy"
    
    if not emb_file.exists() or not ids_file.exists():
        print(f"‚ùå –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {embeddings_dir}")
        return False
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    try:
        embeddings = np.load(emb_file)
        part_ids = np.load(ids_file, allow_pickle=True)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    if len(embeddings) != len(part_ids):
        print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ vs {len(part_ids)} ID")
        return False
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ—Ç–∞–ª—è–º
    print("üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ—Ç–∞–ª—è–º...")
    part_embeddings = defaultdict(list)
    
    for emb, full_id in zip(embeddings, part_ids):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º part_id –∏–∑ full_id (part_id/image_name.jpg)
        try:
            part_id = full_id.split('/')[0]
            part_embeddings[part_id].append(emb)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID {full_id}: {e}")
            continue
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(part_embeddings)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")
    
    if len(part_embeddings) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
        return False
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    print("üîÑ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤...")
    centroids = []
    part_names = []
    
    for part_id, emb_list in part_embeddings.items():
        try:
            # –°—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Å–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏
            centroid = np.mean(emb_list, axis=0).astype(np.float32)
            centroids.append(centroid)
            part_names.append(part_id)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –¥–ª—è {part_id}: {e}")
            continue
    
    if len(centroids) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞")
        return False
    
    centroids = np.array(centroids, dtype=np.float32)
    part_names = np.array(part_names, dtype=object)
    
    print(f"‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–æ {len(centroids)} —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    out_dir.mkdir(parents=True, exist_ok=True)
    
    centroid_file = out_dir / "per_part.npy"
    names_file = out_dir / "part_names.npy"
    meta_file = out_dir / "metadata.json"
    
    # –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    backup_files = []
    if centroid_file.exists():
        backup_path = out_dir / "per_part.npy.backup"
        centroid_file.rename(backup_path)
        backup_files.append(backup_path)
    if names_file.exists():
        backup_path = out_dir / "part_names.npy.backup"
        names_file.rename(backup_path)
        backup_files.append(backup_path)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    try:
        np.save(centroid_file, centroids)
        np.save(names_file, part_names)
        print(f"‚úÖ –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–∞–ø—ã –µ—Å–ª–∏ –±—ã–ª–∏
        for backup_path in backup_files:
            original_path = backup_path.with_suffix('')
            if backup_path.exists() and not original_path.exists():
                backup_path.rename(original_path)
        return False
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        'created_at': datetime.now().isoformat(),
        'total_parts': len(centroids),
        'embedding_dim': centroids.shape[1] if len(centroids.shape) > 1 else (2048 if len(centroids) > 0 else 0),
        'data_type': str(centroids.dtype),
        'source_embeddings': str(embeddings_dir),
        'processing_time': time.time() - start_time
    }
    
    try:
        with open(meta_file, 'w') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    size_mb = (centroid_file.stat().st_size + names_file.stat().st_size) / (1024 * 1024)
    total_time = time.time() - start_time
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(centroids)} —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ ({size_mb:.2f} MB)")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {out_dir}")
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    embeddings_per_part = [len(emb_list) for emb_list in part_embeddings.values()]
    if embeddings_per_part:
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –¥–µ—Ç–∞–ª—å:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {np.mean(embeddings_per_part):.1f}")
        print(f"   –ú–∏–Ω–∏–º—É–º: {np.min(embeddings_per_part)}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {np.max(embeddings_per_part)}")
    
    return True

def main():
    parser = argparse.ArgumentParser(
        description="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–µ—Ç–∞–ª–µ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s --embeddings data/embeddings --out data/centroids
        """
    )
    
    parser.add_argument("--embeddings", type=Path, default=Path("data/embeddings"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
    parser.add_argument("--out", type=Path, default=Path("data/centroids"),
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    
    args = parser.parse_args()
    
    try:
        success = build_centroids(args.embeddings, args.out)
        if success:
            print("\nüéâ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return 0
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
            return 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())