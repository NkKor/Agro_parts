# src/web_app/app.py
import os
import io
from pathlib import Path
import sys
from flask import Flask, request, render_template, redirect, url_for, send_from_directory, jsonify
import cv2 as cv
import numpy as np
import torch
import torchvision.transforms as T
import faiss
from werkzeug.utils import secure_filename

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent.parent
utils_path = project_root / "utils"
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(utils_path))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
try:
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
    import utils.config as config
    from utils.utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
    from src.models.encoder import ResNet50Encoder
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (–≤–∞—Ä–∏–∞–Ω—Ç 1)")
except ImportError:
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        import config as config
        from utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
        from models.encoder import ResNet50Encoder
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (–≤–∞—Ä–∏–∞–Ω—Ç 2)")
    except ImportError:
        try:
            # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            sys.path.append(str(Path(__file__).parent.parent))
            import utils.config as config
            from utils.utils_cv import find_largest_foreground_bbox, pad_bbox, center_square_crop, resize_high_quality
            from src.models.encoder import ResNet50Encoder
            print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (–≤–∞—Ä–∏–∞–Ω—Ç 3)")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:")
            print("   project/")
            print("   ‚îú‚îÄ‚îÄ src/")
            print("   ‚îÇ   ‚îú‚îÄ‚îÄ models/encoder.py")
            print("   ‚îÇ   ‚îî‚îÄ‚îÄ web_app/app.py")
            print("   ‚îî‚îÄ‚îÄ utils/")
            print("       ‚îú‚îÄ‚îÄ config.py")
            print("       ‚îî‚îÄ‚îÄ utils_cv.py")
            sys.exit(1)

# –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
TMP_DIR = Path("tmp_uploads")
TMP_DIR.mkdir(exist_ok=True)

ALLOWED_EXT = {".jpg", ".jpeg", ".png"}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__, 
           template_folder='templates',
           static_folder='static')
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024  # 20 MB per request guard

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
model = None
CENTROIDS = None
CENTROID_IDS = None
PERIMG = None
PERIMG_IDS = None
IDX_C = None
IDX_X = None

# —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –¥–ª—è –º–æ–¥–µ–ª–∏
transform = T.Compose([
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

def init_model_and_indexes():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global model, CENTROIDS, CENTROID_IDS, PERIMG, PERIMG_IDS, IDX_C, IDX_X
    
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∏–Ω–¥–µ–∫—Å—ã...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    device = "cpu"
    if torch.cuda.is_available():
        try:
            x = torch.zeros(1).cuda()
            del x
            device = "cuda"
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CUDA")
        except:
            print("‚ö†Ô∏è  CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    print(f"üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    try:
        model = ResNet50Encoder(out_dim=2048, pretrained=True).to(device).eval()
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    emb_dir = Path(getattr(config, 'EMB_DIR', 'data/embeddings'))
    if not emb_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {emb_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    centroid_files = [
        emb_dir / "per_part.npy",
        emb_dir / "centroids.npy",
        emb_dir / "centroid_vectors.npy"
    ]
    
    centroid_id_files = [
        emb_dir / "part_names.npy",
        emb_dir / "centroid_ids.npy",
        emb_dir / "centroid_names.npy"
    ]
    
    perimg_files = [
        emb_dir / "per_image.npy",
        emb_dir / "embeddings.npy"
    ]
    
    perimg_id_files = [
        emb_dir / "part_ids.npy",
        emb_dir / "image_ids.npy"
    ]
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    centroid_file = None
    centroid_ids_file = None
    perimg_file = None
    perimg_ids_file = None
    
    for f in centroid_files:
        if f.exists():
            centroid_file = f
            break
    
    for f in centroid_id_files:
        if f.exists():
            centroid_ids_file = f
            break
            
    for f in perimg_files:
        if f.exists():
            perimg_file = f
            break
            
    for f in perimg_id_files:
        if f.exists():
            perimg_ids_file = f
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã
    missing_files = []
    if not centroid_file:
        missing_files.append("—Ñ–∞–π–ª —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    if not centroid_ids_file:
        missing_files.append("—Ñ–∞–π–ª ID —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤")
    if not perimg_file:
        missing_files.append("—Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    if not perimg_ids_file:
        missing_files.append("—Ñ–∞–π–ª ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if missing_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for f in missing_files:
            print(f"   - {f}")
        print("\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   python src/build_centroids.py --embeddings data/embeddings --out data/embeddings")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:")
    print(f"   –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã: {centroid_file}")
    print(f"   ID —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {centroid_ids_file}")
    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {perimg_file}")
    print(f"   ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {perimg_ids_file}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
    try:
        CENTROIDS = np.load(centroid_file).astype(np.float32)
        CENTROID_IDS = np.load(centroid_ids_file, allow_pickle=True)
        PERIMG = np.load(perimg_file).astype(np.float32)
        PERIMG_IDS = np.load(perimg_ids_file, allow_pickle=True)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤: {len(CENTROIDS)}")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(PERIMG)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ FAISS (–∏—â–µ–º –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    idx_files = [
        emb_dir / "centroid_index.faiss",
        emb_dir / "faiss_centroid.bin",
        emb_dir / "centroids.index"
    ]
    
    idx_img_files = [
        emb_dir / "image_index.faiss",
        emb_dir / "faiss_img.bin",
        emb_dir / "images.index"
    ]
    
    idx_c_file = None
    idx_x_file = None
    
    for f in idx_files:
        if f.exists():
            idx_c_file = f
            break
    
    for f in idx_img_files:
        if f.exists():
            idx_x_file = f
            break
    
    if not idx_c_file:
        print("‚ùå –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
        print("   python src/build_index.py --embeddings data/embeddings --centroids data/embeddings --out data/embeddings")
        return False
    
    try:
        IDX_C = faiss.read_index(str(idx_c_file))
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        if idx_x_file and idx_x_file.exists():
            IDX_X = faiss.read_index(str(idx_x_file))
            print("‚úÖ –ò–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            IDX_X = None
            print("‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False
    
    print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def allowed_file(filename):
    return Path(filename).suffix.lower() in ALLOWED_EXT

def preprocess_bgr_save(img_bgr):
    """–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω preprocess: ROI->pad->resize."""
    try:
        bbox = find_largest_foreground_bbox(img_bgr, min_area_ratio=getattr(config, 'MIN_OBJ_AREA', 0.01))
        if bbox is not None:
            bbox = pad_bbox(bbox, img_bgr.shape, pad_ratio=getattr(config, 'PAD_RATIO', 0.1))
            x1, y1, x2, y2 = bbox
            crop = img_bgr[y1:y2, x1:x2]
        else:
            crop = center_square_crop(img_bgr)
        out = resize_high_quality(crop, getattr(config, 'TARGET_SIZE', 384))
        return out
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–µ–∑–∫—É
        try:
            return center_square_crop(img_bgr)
        except:
            return img_bgr

@torch.no_grad()
def embed_from_bgr(img_bgr):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ (1,D) numpy float32."""
    try:
        out = preprocess_bgr_save(img_bgr)
        # convert BGR->RGB and to PIL via torchvision.functional or to tensor directly
        import torchvision.transforms.functional as F
        img_rgb = cv.cvtColor(out, cv.COLOR_BGR2RGB)
        pil = F.to_pil_image(img_rgb)
        x = transform(pil).unsqueeze(0).to(next(model.parameters()).device)
        emb = model(x).cpu().numpy()
        # ensure float32 –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        emb = emb.astype('float32')
        emb = emb / (np.linalg.norm(emb, axis=1, keepdims=True) + 1e-12)
        return emb
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return np.zeros((1, 2048), dtype=np.float32)

def search_by_emb(emb, topk=5, rerank_per_image=True, per_image_k=200):
    """–ü–æ–∏—Å–∫: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º, –∑–∞—Ç–µ–º re-rank –ø–æ per-image (max-aggregation)."""
    try:
        # –ù–æ—Ä–º–∏—Ä—É–µ–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        emb = emb / (np.linalg.norm(emb, axis=1, keepdims=True) + 1e-12)
        
        # –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º per_image_k –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è re-rank)
        k_for_search = min(per_image_k, len(CENTROIDS)) if rerank_per_image else min(topk, len(CENTROIDS))
        if k_for_search == 0:
            return []
            
        D, I = IDX_C.search(emb.astype('float32'), k_for_search)
        cand_part_ids = [CENTROID_IDS[i] for i in I[0]]

        if not rerank_per_image:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
            # –î–ª—è L2 —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: —á–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ—Å—Ç—å
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            similarity_scores = []
            for distance in D[0][:topk]:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ (0-100%)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—É: —á–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ—Å—Ç—å
                similarity = max(0, min(100, 100 * np.exp(-distance/2)))
                similarity_scores.append(similarity)
            return list(zip(cand_part_ids[:topk], D[0][:topk].tolist(), similarity_scores))

        # re-rank: –≤–æ–∑—å–º—ë–º –≤—Å–µ per-image –≤–µ–∫—Ç–æ—Ä—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ candidate part ids
        mask = np.isin(PERIMG_IDS, np.array(cand_part_ids, dtype=object))
        if np.sum(mask) == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
            similarity_scores = []
            for distance in D[0][:topk]:
                similarity = max(0, min(100, 100 * np.exp(-distance/2)))
                similarity_scores.append(similarity)
            return list(zip(cand_part_ids[:topk], D[0][:topk].tolist(), similarity_scores))
            
        cand_vectors = PERIMG[mask]            # [M, D]
        cand_ids = PERIMG_IDS[mask]

        # similarity = dot, –ø–æ—Ç–æ–º—É —á—Ç–æ L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        sims = (emb @ cand_vectors.T).ravel()
        best = {}
        for sim, pid in zip(sims, cand_ids):
            prev = best.get(pid)
            if prev is None or sim > prev:
                best[pid] = float(sim)
        ranked = sorted(best.items(), key=lambda x: x[1], reverse=True)[:topk]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º cosine similarity –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã ([-1,1] -> [0,100])
        similarity_scores = []
        for pid, cos_sim in ranked:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cosine similarity –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
            similarity_percent = max(0, min(100, (cos_sim + 1) * 50))
            similarity_scores.append(similarity_percent)
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º [(part_id, distance, similarity_percent), ...]
        return [(ranked[i][0], 1-ranked[i][1], similarity_scores[i]) for i in range(len(ranked))]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def sample_example_for_part(pid):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É –≤ processed/<pid> –¥–ª—è –ø–æ–∫–∞–∑–∞."""
    try:
        processed_dir = Path(getattr(config, 'DATA_PROCESSED', 'data/processed'))
        part_dir = processed_dir / str(pid)
        if not part_dir.exists():
            # –ò—â–µ–º –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
            for subdir in processed_dir.iterdir():
                if subdir.is_dir() and subdir.name == str(pid):
                    part_dir = subdir
                    break
            else:
                return None
        
        if part_dir.exists():
            files = [p for p in part_dir.iterdir() if p.suffix.lower() in ALLOWED_EXT]
            return str(files[0]) if files else None
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è {pid}: {e}")
        return None

# --- –ú–∞—Ä—à—Ä—É—Ç—ã ---
@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/search", methods=["POST"])
def search_route():
    try:
        # –æ–∂–∏–¥–∞–µ–º up to 3 —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ–ª—è 'images'
        files = request.files.getlist("images")
        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        files = [f for f in files if f and f.filename and allowed_file(f.filename)]
        if len(files) == 0:
            return redirect(url_for("index"))

        embeddings = []
        saved_query_paths = []
        for f in files[:3]:
            filename = secure_filename(f.filename)
            if not filename:
                continue
            tmp_path = TMP_DIR / filename
            f.save(tmp_path)
            saved_query_paths.append(str(tmp_path))
            # —á–∏—Ç–∞–µ–º –∏ embed
            img = cv.imread(str(tmp_path), cv.IMREAD_COLOR)
            if img is None:
                continue
            emb = embed_from_bgr(img)   # (1, D)
            embeddings.append(emb)

        if len(embeddings) == 0:
            return redirect(url_for("index"))

        # —É—Å—Ä–µ–¥–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (–ø–æ —Å—Ç—Ä–æ–∫–∞–º)
        stacked = np.vstack(embeddings)   # [k, D]
        query_emb = np.mean(stacked, axis=0, keepdims=True)
        query_emb = query_emb / (np.linalg.norm(query_emb, axis=1, keepdims=True) + 1e-12)

        results = search_by_emb(query_emb, topk=5, rerank_per_image=True)

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        out_results = []
        for i, result in enumerate(results):
            if len(result) == 3:
                pid, distance, similarity_percent = result
            else:
                # fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                pid, distance = result
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                similarity_percent = max(0, min(100, 100 * np.exp(-distance/2)))
            
            sample = sample_example_for_part(pid)
            out_results.append({
                "pid": str(pid), 
                "distance": float(distance), 
                "similarity": f"{similarity_percent:.1f}%",
                "sample": sample,
                "is_best": i == 0  # –ü–æ–º–µ—á–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            })

        # —Ä–µ–Ω–¥–µ—Ä
        return render_template("results.html", query_imgs=saved_query_paths, results=out_results)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_route: {e}")
        import traceback
        traceback.print_exc()
        return redirect(url_for("index"))

# —Å–ª—É–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
@app.route("/uploads/<path:filename>")
def uploaded_file(filename):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Windows
        normalized_filename = filename.replace('\\', '/')
        file_path = TMP_DIR / Path(normalized_filename).name
        if file_path.exists():
            return send_from_directory(str(TMP_DIR), Path(normalized_filename).name)
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return ("Not found", 404)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–∞: {e}")
        return ("Not found", 404)

# —Å–ª—É–∂–∏–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ processed (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
@app.route("/processed/<path:filepath>")
def processed_img(filepath):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        normalized_filepath = filepath.replace('\\', '/')
        processed_dir = Path(getattr(config, 'DATA_PROCESSED', 'data/processed'))
        full_path = processed_dir / normalized_filepath
        
        if full_path.exists():
            return send_from_directory(str(full_path.parent), full_path.name)
        else:
            print(f"‚ùå Processed —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
            return ("Not found", 404)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ processed —Ñ–∞–π–ª–∞: {e}")
        return ("Not found", 404)

# API endpoint –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@app.route("/api/search", methods=["POST"])
def api_search():
    """API endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    try:
        files = request.files.getlist("images")
        files = [f for f in files if f and f.filename and allowed_file(f.filename)]
        
        if len(files) == 0:
            return jsonify({"error": "No valid images provided"}), 400

        embeddings = []
        for f in files[:3]:
            # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            img_bytes = f.read()
            img_array = np.frombuffer(img_bytes, np.uint8)
            img = cv.imdecode(img_array, cv.IMREAD_COLOR)
            
            if img is not None:
                emb = embed_from_bgr(img)
                embeddings.append(emb)

        if len(embeddings) == 0:
            return jsonify({"error": "Could not process any images"}), 400

        # –£—Å—Ä–µ–¥–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        stacked = np.vstack(embeddings)
        query_emb = np.mean(stacked, axis=0, keepdims=True)
        query_emb = query_emb / (np.linalg.norm(query_emb, axis=1, keepdims=True) + 1e-12)

        results = search_by_emb(query_emb, topk=5, rerank_per_image=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = []
        for i, result in enumerate(results):
            if len(result) == 3:
                pid, distance, similarity_percent = result
            else:
                # fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                pid, distance = result
                similarity_percent = max(0, min(100, 100 * np.exp(-distance/2)))
                
            formatted_results.append({
                "part_id": str(pid),
                "distance": float(distance),
                "similarity_percent": f"{similarity_percent:.1f}%",
                "is_best": i == 0
            })

        return jsonify({
            "success": True,
            "results": formatted_results
        })
        
    except Exception as e:
        print(f"‚ùå API –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route("/health")
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "model_loaded": model is not None,
        "indexes_loaded": IDX_C is not None,
        "centroids_count": len(CENTROIDS) if CENTROIDS is not None else 0,
        "images_count": len(PERIMG) if PERIMG is not None else 0
    })

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
    if not init_model_and_indexes():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏ –∏–Ω–¥–µ–∫—Å—ã")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(host="0.0.0.0", port=5000, debug=True)